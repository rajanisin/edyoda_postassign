steps needed to update a container's image using deployment, making sure that there is zero downtime:

[root@ip-172-31-20-227 ec2-user]# kubectl describe deploy pal-deploy -n palani | grep -i Replica
Replicas:               1 desired | 1 updated | 1 total | 1 available | 0 unavailable
  Available      True    MinimumReplicasAvailable
  Progressing    True    NewReplicaSetAvailable
OldReplicaSets:  <none>
NewReplicaSet:   pal-deploy-7c854749c4 (1/1 replicas created)
  Normal  ScalingReplicaSet  23m   deployment-controller  Scaled up replica set pal-deploy-7c854749c4 to 1
  
# current deployment with replicas 1

[root@ip-172-31-20-227 ec2-user]# kubectl describe deploy pal-deploy -n palani | grep -i StrategyType -A 5
StrategyType:           RollingUpdate
MinReadySeconds:        0
RollingUpdateStrategy:  25% max unavailable, 25% max surge
Pod Template:
  Labels:  app=pal-deploy
  Containers:
  
  
# referring the printout during upgrade these Pods, Deployment ensures that only a certain number of Pods are down during the upgrade. 
# it ensures that at least 75% of the number of Pods are up (meaning that only 25% can be unavailable.
# Deployment will create new pods first, then deletes an old Pods, It does not kill old Pods until a expected number of new Pods have come up.



# using kubectl edit deplyment user can upgrade the pods by change the image version in running yaml file.
# another method is using kubectl set image command.

